const LineParser = require('../line-parser');

/**
 * restore json from dart file generated by Jetbrains Plugin 12562-JsonToDart
 * @param {String|ReadStream|Buffer} file dart file, or stream or buffer
 */
module.exports = {
  id: 'jetbrains-12562',
  name: 'JetbrainsJsonToDart',
  alias: ['JsonToDart'],
  homepage: 'https://plugins.jetbrains.com/plugin/12562-jsontodart-json-to-dart-/',
  description: 'Jetbrains Plugin 12562-JsonToDart',
  fn: function (file) {
    return new Promise(function (resolve, reject) {
      let parser = new LineParser();
      let objs = {};
      let curData = {};
      let cur = {};
      let top = true;
      parser.on('error', reject);
      parser.on('line', function (line) {
        if (/^\/\/\/\s*(\w+)\s*:\s*(.*)$/.test(line)) {
          curData[RegExp.$1] = JSON.parse(RegExp.$2);
        } else if (/^class\s+(\w+)/.test(line)) {
          let name = RegExp.$1;
          cur = objs[name];
          if (!cur) {
            cur = objs[name] = {
              data: curData,
              cfg: {
                name,
                map: {},
              }
            };
          }
          if (top) {
            cur.top = top;
            top = !top;
          }
          curData = {};
        } else if (/^\s*(\w+)\s+_(\w+);\s*$/.test(line)) {
          let name = RegExp.$1;
          let field = RegExp.$2;
          if (!['int', 'double', 'String', 'bool', 'dynamic'].includes(name)) {
            let ob = objs[name];
            if (!ob) {
              ob = objs[name] = {
                data: {},
                cfg: {
                  name,
                  map: {},
                }
              };
            }
            cur.cfg.map[field] = ob.cfg;
          }
        }
      });
      parser.on('end', function () {
        for (let name in objs) {
          let obj = objs[name];
          if (obj.top) {
            if (Object.keys(obj.data).length === 0) {
              let err = new Error('not a dart file generated by this plugin.');
              err.raw = objs;
              reject(err);
            }
            return resolve({
              data: obj.data,
              map: obj.cfg,
            });
          }
        }
        let err = new Error('no top class found');
        err.raw = objs;
        reject(err);
      });
      parser.parse(file);
    });
  }
};
